services:

    graviton.rest.serializer:
        parent: "jms_serializer"
        public: true
        calls:
          -
            method: setSerializationContextFactory
            arguments:
              - "@graviton.rest.serializer.serializercontext.factory"

    graviton.rest.serializer.serializercontext.factory:
        parent: "graviton.rest.serializer.context.abstract"
        class: "%graviton.rest.serializer.serializercontext.factory.class%"

    graviton.rest.serializer.context.abstract:
        class: "%graviton.rest.serializer.context.abstract.class%"
        calls:
          -
            method: setSetSerializeNull
            arguments:
              - false
          -
            method: setRequestStack
            arguments:
              - "@request_stack"
          -
            method: setGroups
            arguments:
              - "%graviton.rest.serializer.groups%"
          -
            method: setOverrideHeaderName
            arguments:
              - "%graviton.rest.serializer.override_header_name%"
          -
            method: setOverrideHeaderAllowed
            arguments:
              - "%graviton.rest.serializer.allow_group_override_header%"

    graviton.rest.router:
        alias: router

    #Routing -->
    #Routing collection -->
    graviton.rest.routing.collection:
        class: "%graviton.rest.routing.collection.class%"

    #Routing loader -->
    graviton.rest.routing.loader:
        class: "%graviton.rest.routing.loader.class%"
        public: true
        arguments:
          - "@graviton.rest.routing.collection"
          - "%graviton.rest.services%"
        tags:
          -
            name: "graviton.routing.loader"

    #Service for validating JSON Patches -->
    graviton.rest.service.jsonpatchvalidator:
        class: Graviton\RestBundle\Service\JsonPatchValidator

    #Controller -->
    graviton.rest.controller:
        abstract: true
        public: true
        arguments:
          - "@graviton.rest.response"
          - "@graviton.rest.restutils"
          - "@graviton.rest.router"
          - "@service_container"
          - "@graviton.schema.utils"
          - "@graviton.rest.service.jsonpatchvalidator"
          - "@graviton.security.service.utils"
        calls:
          -
            method: setLogger
            arguments:
              - "@logger"

    #Model -->
    graviton.rest.model:
        abstract: true
        class: "%graviton.rest.model.documentmodel.class%"
        parent: "graviton.schema.model.schemamodel"
        arguments:
          - '@graviton.rest.service.query'
          - "@graviton.rest.restutils"
          - "@event_dispatcher"
          - "%graviton.rest.not_modifiable.origin.records%"

    # query service -->
    graviton.rest.service.query:
        class: Graviton\RestBundle\Service\QueryService
        arguments:
          - "@logger"
          - "@graviton.rql.visitor.mongodb"
          - "@graviton.rest.restriction.manager"
          - "%graviton.rest.pagination.limit%"
          - "@event_dispatcher"

    #Response object wrapper with scope request (get a new one for each request) -->
    graviton.rest.response:
        class: "%graviton.rest.response.class%"

    #Json Request listener -->
    graviton.rest.listener.writelocklistener:
        class: Graviton\RestBundle\Listener\WriteLockListener
        arguments:
          - "@logger"
          - "@request_stack"
          - "@=service(parameter('graviton.cache.provider.service_id'))"
          - "%graviton.writelock.randomwaiturls%"
        tags:
          -
            name: kernel.event_listener
            event: kernel.controller
            priority: 9999
            method: onKernelController
          -
            name: kernel.event_listener
            event: kernel.response
            priority: 9999
            method: onKernelResponse
          -
            name: kernel.event_listener
            event: kernel.exception
            priority: 9999
            method: onKernelException

    #Json Request listener -->
    graviton.rest.listener.jsonrequestlistener:
        class: Graviton\RestBundle\Listener\JsonRequestListener
        tags:
          -
            name: kernel.event_listener
            event: graviton.rest.request
            method: onKernelRequest

    #Special mimetypes Request listener -->
    graviton.rest.listener.specialmimetypesrequestlistener:
        class: Graviton\RestBundle\Listener\SpecialMimetypeRequestListener
        arguments:
          - "@service_container"
        tags:
          -
            name: kernel.event_listener
            event: graviton.rest.request
            method: onKernelRequest

    #Allowed RQL operator listener -->
    graviton.rest.listener.rqlallowedoperatorrequestlistener:
        class: "%graviton.rest.listener.rqlallowedoperatorrequestlistener.class%"
        tags:
          -
            name: kernel.event_listener
            event: graviton.rest.request
            method: onKernelRequest

    #restUtils service - a service providing some helpers dealing with services -->
    graviton.rest.restutils:
        class: Graviton\RestBundle\Service\RestUtils
        public: true
        arguments:
          - "@service_container"
          - "@router"
          - "@graviton.rest.serializer"
          - "@logger"
          - "@graviton.schema.utils"
          - "@graviton.jsonschema.validator"
          - "@=service(parameter('graviton.cache.provider.service_id_local'))"

    #Graviton rest event stuff -->
    #Rest event with scope prototype (get e new event object, every time you get it from the container) -->
    graviton.rest.event:
        class: Graviton\RestBundle\Event\RestEvent
        shared: false

    graviton.rest.event.subscriber:
        class: "%graviton.rest.event.subscriber.class%"
        arguments:
          - "@graviton.rest.response"
          - "@graviton.rest.event"
          - "@service_container"
        tags:
          -
            name: kernel.event_subscriber

    #Graviton rest event listeners -->
    #Paging listener -->
    graviton.rest.listener.linkheaderresponselistener:
        class: "%graviton.rest.listener.linkheaderresponselistener.class%"
        arguments:
          - "@router"
        tags:
          -
            name: kernel.event_listener
            event: graviton.rest.response
            method: onKernelResponse

    #Cors listener (move the addHeader calls somewhere else... -->
    graviton.rest.listener.corsresponselistener:
        class: "%graviton.rest.listener.corsresponselistener.class%"
        tags:
          -
            name: kernel.event_listener
            event: graviton.rest.response
            method: onKernelResponse
        calls:
          -
            method: addHeader
            arguments:
              - Link
          -
            method: addHeader
            arguments:
              - Accept
          -
            method: addHeader
            arguments:
              - X-Requested-With
          -
            method: addHeader
            arguments:
              - Content-Type
          -
            method: addHeader
            arguments:
              - Origin
          -
            method: addHeader
            arguments:
              - Cache-Control
          -
            method: addHeader
            arguments:
              - ETag
          -
            method: addHeader
            arguments:
              - Date
          -
            method: addHeader
            arguments:
              - Access-Control-Allow-Methods
          -
            method: addHeader
            arguments:
              - Content-Language
          -
            method: addHeader
            arguments:
              - Location
          -
            method: addHeader
            arguments:
              - X-Total-Count
          -
            method: addHeader
            arguments:
              - X-Record-Count
          -
            #clients need this to read the current version in case of a versioned service -->
            method: addHeader
            arguments:
              - "%graviton.rest.headers.x-versioning%"
          -
            method: addAllowHeader
            arguments:
              - Cache-Control
          -
            method: addAllowHeader
            arguments:
              - Content-Type
          -
            method: addAllowHeader
            arguments:
              - Content-Language
          -
            method: addAllowHeader
            arguments:
              - If-None-Match
          -
            method: addAllowHeader
            arguments:
              - X-Analytics-No-Cache
          -
            #we need to allow this header since clients routinely send it even though we want to replace it with something sane like OAuth2 -->
            method: addAllowHeader
            arguments:
              - X-REST-Token
          -
            #we need to allow this header since clients routinely send it even though we want to replace it with something sane like OAuth2 -->
            method: addAllowHeader
            arguments:
              - X-AUTH-Token
          -
            #we need to allow this header since new clients like E11 use it -->
            method: addAllowHeader
            arguments:
              - Pragma
          -
            #we need to allow this header for basic auth environments -->
            method: addAllowHeader
            arguments:
              - Authorization
          -
            #static headers -->
            method: addStaticHeader
            arguments:
              - X-Frame-Options
              - DENY

    #X-Version response listener -->
    graviton.rest.listener.xversionresponselistener:
        class: "%graviton.rest.listener.xversionresponselistener.class%"
        arguments:
          - "%graviton.core.version.header%"
        tags:
          -
            name: kernel.event_listener
            event: graviton.rest.response
            method: onKernelResponse


    #RQL query listener (see RqlQueryDecoratorCompilerPass) -->
    graviton.rest.listener.rqlqueryrequestlistener:
        class: "%graviton.rest.listener.rqlqueryrequestlistener.class%"
        decorates: graviton.rql.listener.request
        decoration_inner_name: graviton.rest.listener.rqlqueryrequestlistener.inner
        arguments:
          - "@graviton.rest.listener.rqlqueryrequestlistener.inner"
          - "%graviton.rest.listener.rqlqueryrequestlistener.allowedroutes%"

    # listener that restricts the data given to the user by manipulating the querybuilder before executing
    graviton.rest.listener.restriction:
      class: "%graviton.rest.listener.restriction.class%"
      arguments:
        - "@logger"
        - "%graviton.rest.data_restriction.map%"
        - "@request_stack"
      tags:
        - name: kernel.event_listener
          event: document.model.event.query
          method: onModelQuery
        - name: kernel.event_listener
          event: document.model.event.entity.pre_persist
          method: onEntityPrePersistOrDelete
        - name: kernel.event_listener
          event: document.model.event.entity.pre_delete
          method: onEntityPrePersistOrDelete
        - name: kernel.event_listener
          event: analytics.event.pre_aggregate
          method: onPreAggregate
        - name: kernel.event_listener
          event: rql.visit.node
          method: onRqlSearch
          priority: -100

    graviton.rest.restriction.manager:
        class: "%graviton.rest.restriction.manager.class%"
        arguments:
          - "%graviton.document.restriction.fields%"
        calls:
          -
            method: registerHandler
            arguments:
              - "@graviton.rest.restriction.handler.whoami"

    graviton.rest.restriction.handler.whoami:
        class: "%graviton.rest.restriction.handler.whoami.class%"
        arguments:
          - "@graviton.security.service.utils"

  # fixtures
    Graviton\RestBundle\DataFixtures\MongoDB\LoadRestrictionListenerTestData:
      class: Graviton\RestBundle\DataFixtures\MongoDB\LoadRestrictionListenerTestData
      tags:
        - { name: 'doctrine.fixture.orm' }
